# Generated from cure/parser/Cure.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,302,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,10,3,10,144,8,10,1,10,4,10,147,8,10,11,10,12,10,148,1,11,
        3,11,152,8,11,1,11,5,11,155,8,11,10,11,12,11,158,9,11,1,11,1,11,
        4,11,162,8,11,11,11,12,11,163,1,12,1,12,5,12,168,8,12,10,12,12,12,
        171,9,12,1,12,1,12,1,12,5,12,176,8,12,10,12,12,12,179,9,12,1,12,
        1,12,3,12,183,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,194,8,13,1,14,1,14,1,14,1,14,1,15,1,15,5,15,202,8,15,10,15,
        12,15,205,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,
        1,42,1,42,5,42,271,8,42,10,42,12,42,274,9,42,1,42,1,42,1,42,1,42,
        1,43,1,43,1,43,1,43,5,43,284,8,43,10,43,12,43,287,9,43,1,43,1,43,
        1,43,1,43,1,43,1,44,4,44,295,8,44,11,44,12,44,296,1,44,1,44,1,45,
        1,45,4,169,177,272,285,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,314,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,
        93,1,0,0,0,3,96,1,0,0,0,5,100,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,
        0,11,112,1,0,0,0,13,119,1,0,0,0,15,125,1,0,0,0,17,131,1,0,0,0,19,
        140,1,0,0,0,21,143,1,0,0,0,23,151,1,0,0,0,25,182,1,0,0,0,27,193,
        1,0,0,0,29,195,1,0,0,0,31,199,1,0,0,0,33,206,1,0,0,0,35,208,1,0,
        0,0,37,210,1,0,0,0,39,212,1,0,0,0,41,214,1,0,0,0,43,216,1,0,0,0,
        45,219,1,0,0,0,47,222,1,0,0,0,49,224,1,0,0,0,51,226,1,0,0,0,53,229,
        1,0,0,0,55,232,1,0,0,0,57,235,1,0,0,0,59,238,1,0,0,0,61,240,1,0,
        0,0,63,242,1,0,0,0,65,244,1,0,0,0,67,246,1,0,0,0,69,248,1,0,0,0,
        71,250,1,0,0,0,73,252,1,0,0,0,75,254,1,0,0,0,77,256,1,0,0,0,79,258,
        1,0,0,0,81,261,1,0,0,0,83,264,1,0,0,0,85,266,1,0,0,0,87,279,1,0,
        0,0,89,294,1,0,0,0,91,300,1,0,0,0,93,94,5,105,0,0,94,95,5,102,0,
        0,95,2,1,0,0,0,96,97,5,110,0,0,97,98,5,101,0,0,98,99,5,119,0,0,99,
        4,1,0,0,0,100,101,5,102,0,0,101,102,5,110,0,0,102,6,1,0,0,0,103,
        104,5,101,0,0,104,105,5,108,0,0,105,106,5,115,0,0,106,107,5,101,
        0,0,107,8,1,0,0,0,108,109,5,109,0,0,109,110,5,117,0,0,110,111,5,
        116,0,0,111,10,1,0,0,0,112,113,5,114,0,0,113,114,5,101,0,0,114,115,
        5,116,0,0,115,116,5,117,0,0,116,117,5,114,0,0,117,118,5,110,0,0,
        118,12,1,0,0,0,119,120,5,119,0,0,120,121,5,104,0,0,121,122,5,105,
        0,0,122,123,5,108,0,0,123,124,5,101,0,0,124,14,1,0,0,0,125,126,5,
        98,0,0,126,127,5,114,0,0,127,128,5,101,0,0,128,129,5,97,0,0,129,
        130,5,107,0,0,130,16,1,0,0,0,131,132,5,99,0,0,132,133,5,111,0,0,
        133,134,5,110,0,0,134,135,5,116,0,0,135,136,5,105,0,0,136,137,5,
        110,0,0,137,138,5,117,0,0,138,139,5,101,0,0,139,18,1,0,0,0,140,141,
        5,39,0,0,141,20,1,0,0,0,142,144,5,45,0,0,143,142,1,0,0,0,143,144,
        1,0,0,0,144,146,1,0,0,0,145,147,7,0,0,0,146,145,1,0,0,0,147,148,
        1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,22,1,0,0,0,150,152,5,
        45,0,0,151,150,1,0,0,0,151,152,1,0,0,0,152,156,1,0,0,0,153,155,7,
        0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,
        0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,161,5,46,0,0,160,162,7,
        0,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,
        0,0,0,164,24,1,0,0,0,165,169,5,34,0,0,166,168,9,0,0,0,167,166,1,
        0,0,0,168,171,1,0,0,0,169,170,1,0,0,0,169,167,1,0,0,0,170,172,1,
        0,0,0,171,169,1,0,0,0,172,183,5,34,0,0,173,177,3,19,9,0,174,176,
        9,0,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,0,0,177,175,
        1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,3,19,9,0,181,183,
        1,0,0,0,182,165,1,0,0,0,182,173,1,0,0,0,183,26,1,0,0,0,184,185,5,
        116,0,0,185,186,5,114,0,0,186,187,5,117,0,0,187,194,5,101,0,0,188,
        189,5,102,0,0,189,190,5,97,0,0,190,191,5,108,0,0,191,192,5,115,0,
        0,192,194,5,101,0,0,193,184,1,0,0,0,193,188,1,0,0,0,194,28,1,0,0,
        0,195,196,5,110,0,0,196,197,5,105,0,0,197,198,5,108,0,0,198,30,1,
        0,0,0,199,203,7,1,0,0,200,202,7,2,0,0,201,200,1,0,0,0,202,205,1,
        0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,32,1,0,0,0,205,203,1,0,
        0,0,206,207,5,43,0,0,207,34,1,0,0,0,208,209,5,45,0,0,209,36,1,0,
        0,0,210,211,5,42,0,0,211,38,1,0,0,0,212,213,5,47,0,0,213,40,1,0,
        0,0,214,215,5,37,0,0,215,42,1,0,0,0,216,217,5,61,0,0,217,218,5,61,
        0,0,218,44,1,0,0,0,219,220,5,33,0,0,220,221,5,61,0,0,221,46,1,0,
        0,0,222,223,5,62,0,0,223,48,1,0,0,0,224,225,5,60,0,0,225,50,1,0,
        0,0,226,227,5,62,0,0,227,228,5,61,0,0,228,52,1,0,0,0,229,230,5,60,
        0,0,230,231,5,61,0,0,231,54,1,0,0,0,232,233,5,38,0,0,233,234,5,38,
        0,0,234,56,1,0,0,0,235,236,5,124,0,0,236,237,5,124,0,0,237,58,1,
        0,0,0,238,239,5,33,0,0,239,60,1,0,0,0,240,241,5,46,0,0,241,62,1,
        0,0,0,242,243,5,44,0,0,243,64,1,0,0,0,244,245,5,61,0,0,245,66,1,
        0,0,0,246,247,5,40,0,0,247,68,1,0,0,0,248,249,5,41,0,0,249,70,1,
        0,0,0,250,251,5,123,0,0,251,72,1,0,0,0,252,253,5,125,0,0,253,74,
        1,0,0,0,254,255,5,91,0,0,255,76,1,0,0,0,256,257,5,93,0,0,257,78,
        1,0,0,0,258,259,5,60,0,0,259,260,5,45,0,0,260,80,1,0,0,0,261,262,
        5,45,0,0,262,263,5,62,0,0,263,82,1,0,0,0,264,265,5,38,0,0,265,84,
        1,0,0,0,266,267,5,47,0,0,267,268,5,47,0,0,268,272,1,0,0,0,269,271,
        9,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,273,1,0,0,0,272,270,
        1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,5,10,0,0,276,277,
        1,0,0,0,277,278,6,42,0,0,278,86,1,0,0,0,279,280,5,47,0,0,280,281,
        5,42,0,0,281,285,1,0,0,0,282,284,9,0,0,0,283,282,1,0,0,0,284,287,
        1,0,0,0,285,286,1,0,0,0,285,283,1,0,0,0,286,288,1,0,0,0,287,285,
        1,0,0,0,288,289,5,42,0,0,289,290,5,47,0,0,290,291,1,0,0,0,291,292,
        6,43,0,0,292,88,1,0,0,0,293,295,7,3,0,0,294,293,1,0,0,0,295,296,
        1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,
        6,44,0,0,299,90,1,0,0,0,300,301,9,0,0,0,301,92,1,0,0,0,14,0,143,
        148,151,156,163,169,177,182,193,203,272,285,296,1,6,0,0
    ]

class CureLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    NEW = 2
    FUNC = 3
    ELSE = 4
    MUTABLE = 5
    RETURN = 6
    WHILE = 7
    BREAK = 8
    CONTINUE = 9
    APOSTROPHE = 10
    INT = 11
    FLOAT = 12
    STRING = 13
    BOOL = 14
    NIL = 15
    ID = 16
    ADD = 17
    SUB = 18
    MUL = 19
    DIV = 20
    MOD = 21
    EEQ = 22
    NEQ = 23
    GT = 24
    LT = 25
    GTE = 26
    LTE = 27
    AND = 28
    OR = 29
    NOT = 30
    DOT = 31
    COMMA = 32
    ASSIGN = 33
    LPAREN = 34
    RPAREN = 35
    LBRACE = 36
    RBRACE = 37
    LBRACK = 38
    RBRACK = 39
    RARROW = 40
    RETURNS = 41
    AMPERSAND = 42
    COMMENT = 43
    MULTILINE_COMMENT = 44
    WHITESPACE = 45
    OTHER = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'new'", "'fn'", "'else'", "'mut'", "'return'", "'while'", 
            "'break'", "'continue'", "'''", "'nil'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
            "'&&'", "'||'", "'!'", "'.'", "','", "'='", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "'<-'", "'->'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "NEW", "FUNC", "ELSE", "MUTABLE", "RETURN", "WHILE", "BREAK", 
            "CONTINUE", "APOSTROPHE", "INT", "FLOAT", "STRING", "BOOL", 
            "NIL", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EEQ", "NEQ", 
            "GT", "LT", "GTE", "LTE", "AND", "OR", "NOT", "DOT", "COMMA", 
            "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
            "RBRACK", "RARROW", "RETURNS", "AMPERSAND", "COMMENT", "MULTILINE_COMMENT", 
            "WHITESPACE", "OTHER" ]

    ruleNames = [ "IF", "NEW", "FUNC", "ELSE", "MUTABLE", "RETURN", "WHILE", 
                  "BREAK", "CONTINUE", "APOSTROPHE", "INT", "FLOAT", "STRING", 
                  "BOOL", "NIL", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "EEQ", "NEQ", "GT", "LT", "GTE", "LTE", "AND", "OR", "NOT", 
                  "DOT", "COMMA", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACK", "RBRACK", "RARROW", "RETURNS", "AMPERSAND", 
                  "COMMENT", "MULTILINE_COMMENT", "WHITESPACE", "OTHER" ]

    grammarFileName = "Cure.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


